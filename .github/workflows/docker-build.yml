name: Docker Build and Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-nginx:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nginx
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create Nginx Dockerfile
        run: |
          cat > nginx/Dockerfile << 'EOF'
          FROM nginx:alpine
          COPY default.conf /etc/nginx/conf.d/default.conf
          COPY nginx.conf /etc/nginx/nginx.conf
          EXPOSE 80 443
          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-nginx]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create deployment artifacts
        run: |
          mkdir -p deployment
          
          # Create docker-compose.prod.yml for deployment
          cat > deployment/docker-compose.prod.yml << 'EOF'
          version: '3.8'
          
          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
              restart: unless-stopped
              environment:
                - NODE_ENV=production
                - DATABASE_URL=${DATABASE_URL}
                - JWT_SECRET=${JWT_SECRET}
                - SUPABASE_URL=${SUPABASE_URL}
                - SUPABASE_KEY=${SUPABASE_KEY}
              depends_on:
                - postgres
              networks:
                - app-network
          
            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
              restart: unless-stopped
              environment:
                - NODE_ENV=production
                - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
              depends_on:
                - backend
              networks:
                - app-network
          
            nginx:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nginx:latest
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              depends_on:
                - frontend
                - backend
              networks:
                - app-network
          
            postgres:
              image: postgres:15
              restart: unless-stopped
              environment:
                - POSTGRES_DB=${POSTGRES_DB}
                - POSTGRES_USER=${POSTGRES_USER}
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - app-network
          
          volumes:
            postgres_data:
          
          networks:
            app-network:
              driver: bridge
          EOF

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files
          path: deployment/

      - name: Deploy notification
        run: |
          echo "ðŸš€ Deployment ready!"
          echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest"
          echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest"
          echo "Nginx image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nginx:latest"
          echo ""
          echo "To deploy, run:"
          echo "docker-compose -f deployment/docker-compose.prod.yml up -d"